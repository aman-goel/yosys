+ body
+ cd empty.out
++ basename empty.aig
+ fn=empty.aig
++ basename empty
+ bn=empty
+ rm -f empty_ref.fir
+ [[ aig == \v ]]
+ /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../yosys -f 'aiger ' -b verilog -o empty_ref.v ../empty.aig

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)


-- Parsing `../empty.aig' using frontend `aiger ' --

1. Executing AIGER frontend.
M=0 I=0 L=0 O=0 A=0 B=0 C=0 J=0 F=0

-- Writing to `empty_ref.v' using backend `verilog' --

2. Executing Verilog backend.
Dumping module `\../empty.aig'.

End of script. Logfile hash: e279d96509
CPU: user 0.00s system 0.00s, MEM: 41.20 MB total, 6.72 MB resident
Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)
Time spent: 63% 1x write_verilog (0 sec), 36% 1x read_aiger (0 sec)
+ frontend=verilog
+ '[' '!' -f ../empty_tb.v ']'
+ /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../yosys -f 'verilog ' -b 'test_autotb ' -o empty_tb.v empty_ref.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)


-- Parsing `empty_ref.v' using frontend `verilog ' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `empty_ref.v' to AST representation.
Generating RTLIL representation for module `\../empty.aig'.
Successfully finished Verilog frontend.

-- Writing to `empty_tb.v' using backend `test_autotb ' --

2. Executing TEST_AUTOTB backend (auto-generate pseudo-random test benches).
Generating test bench for module `\../empty.aig'.

End of script. Logfile hash: 137dd2dc7a
CPU: user 0.00s system 0.00s, MEM: 41.20 MB total, 6.71 MB resident
Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)
Time spent: 66% 1x read_verilog (0 sec), 33% 1x test_autotb (0 sec)
+ false
+ compile_and_run empty_tb_ref empty_out_ref empty_tb.v empty_ref.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simlib.v
+ exe=empty_tb_ref
+ output=empty_out_ref
+ shift 2
+ false
+ false
+ iverilog '-Doutfile="empty_out_ref"' -s testbench -o empty_tb_ref empty_tb.v empty_ref.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simlib.v
+ vvp -n empty_tb_ref
+ false
+ test_count=0
+ '[' verilog = verific -o verilog = verific_gates ']'
+ '[' -n '' ']'
+ '[' -n '' ']'
+ '[' verilog = verific ']'
+ '[' verilog = verific_gates ']'
+ test_passes -f 'verilog ' -p 'hierarchy; proc; opt; memory; opt; fsm; opt -full -fine' empty_ref.v
+ /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../yosys -b 'verilog -noattr -noexpr -siminit' -o empty_syn0.v -f 'verilog ' -p 'hierarchy; proc; opt; memory; opt; fsm; opt -full -fine' empty_ref.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)


-- Parsing `empty_ref.v' using frontend `verilog ' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `empty_ref.v' to AST representation.
Generating RTLIL representation for module `\../empty.aig'.
Successfully finished Verilog frontend.

-- Running command `hierarchy; proc; opt; memory; opt; fsm; opt -full -fine' --

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_INIT pass (extract init attributes).

3.4. Executing PROC_ARST pass (detect async resets in processes).

3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \../empty.aig..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \../empty.aig.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

4.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

4.8. Executing OPT_EXPR pass (perform const folding).

4.9. Finished OPT passes. (There is nothing left to do.)

5. Executing MEMORY pass.

5.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

5.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

5.5. Executing MEMORY_COLLECT pass (generating $mem cells).

5.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \../empty.aig..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \../empty.aig.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

6.8. Executing OPT_EXPR pass (perform const folding).

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing FSM pass (extract and optimize FSM).

7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \../empty.aig..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \../empty.aig.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

8.8. Executing OPT_EXPR pass (perform const folding).

8.9. Finished OPT passes. (There is nothing left to do.)

-- Writing to `empty_syn0.v' using backend `verilog -noattr -noexpr -siminit' --

9. Executing Verilog backend.
Dumping module `\../empty.aig'.

End of script. Logfile hash: e80dfae688
CPU: user 0.01s system 0.00s, MEM: 41.29 MB total, 8.29 MB resident
Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)
Time spent: 31% 6x opt_expr (0 sec), 24% 6x opt_clean (0 sec), ...
+ compile_and_run empty_tb_syn0 empty_out_syn0 empty_tb.v empty_syn0.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simlib.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simcells.v
+ exe=empty_tb_syn0
+ output=empty_out_syn0
+ shift 2
+ false
+ false
+ iverilog '-Doutfile="empty_out_syn0"' -s testbench -o empty_tb_syn0 empty_tb.v empty_syn0.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simlib.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simcells.v
+ vvp -n empty_tb_syn0
+ false
+ /home/rock/ws/version/github/aman_goel/yosys/tests/tools/cmp_tbdata empty_out_ref empty_out_syn0
+ test_count=1
+ test_passes -f 'verilog ' -p 'hierarchy; synth -run coarse; techmap; opt; abc -dff' empty_ref.v
+ /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../yosys -b 'verilog -noattr -noexpr -siminit' -o empty_syn1.v -f 'verilog ' -p 'hierarchy; synth -run coarse; techmap; opt; abc -dff' empty_ref.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)


-- Parsing `empty_ref.v' using frontend `verilog ' --

1. Executing Verilog-2005 frontend.
Parsing Verilog input from `empty_ref.v' to AST representation.
Generating RTLIL representation for module `\../empty.aig'.
Successfully finished Verilog frontend.

-- Running command `hierarchy; synth -run coarse; techmap; opt; abc -dff' --

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing SYNTH pass.

3.1. Executing PROC pass (convert processes to netlists).

3.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.1.3. Executing PROC_INIT pass (extract init attributes).

3.1.4. Executing PROC_ARST pass (detect async resets in processes).

3.1.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.1.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.1.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.1.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing OPT_EXPR pass (perform const folding).

3.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.4. Executing CHECK pass (checking for obvious problems).
checking module ../empty.aig..
found and reported 0 problems.

3.5. Executing OPT pass (performing simple optimizations).

3.5.1. Executing OPT_EXPR pass (perform const folding).

3.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

3.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \../empty.aig..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \../empty.aig.
Performed a total of 0 changes.

3.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

3.5.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.5.8. Executing OPT_EXPR pass (perform const folding).

3.5.9. Finished OPT passes. (There is nothing left to do.)

3.6. Executing WREDUCE pass (reducing word size of cells).

3.7. Executing TECHMAP pass (map to technology primitives).

3.7.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/rock/ws/version/github/aman_goel/yosys/share/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.
No more expansions possible.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ../empty.aig:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \../empty.aig..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \../empty.aig.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
No more expansions possible.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \../empty.aig..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \../empty.aig.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\../empty.aig'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \../empty.aig..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Summary of detected clock domains:

-- Writing to `empty_syn1.v' using backend `verilog -noattr -noexpr -siminit' --

7. Executing Verilog backend.
Dumping module `\../empty.aig'.

End of script. Logfile hash: af5e0ff557
CPU: user 0.02s system 0.00s, MEM: 42.21 MB total, 9.63 MB resident
Yosys 0.8+316 (git sha1 57c2763f, clang 4.0.1-6 -fPIC -Os)
Time spent: 45% 3x read_verilog (0 sec), 14% 9x opt_clean (0 sec), ...
+ compile_and_run empty_tb_syn1 empty_out_syn1 empty_tb.v empty_syn1.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simlib.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simcells.v
+ exe=empty_tb_syn1
+ output=empty_out_syn1
+ shift 2
+ false
+ false
+ iverilog '-Doutfile="empty_out_syn1"' -s testbench -o empty_tb_syn1 empty_tb.v empty_syn1.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simlib.v /home/rock/ws/version/github/aman_goel/yosys/tests/tools/../../techlibs/common/simcells.v
+ vvp -n empty_tb_syn1
+ false
+ /home/rock/ws/version/github/aman_goel/yosys/tests/tools/cmp_tbdata empty_out_ref empty_out_syn1
+ test_count=2
+ '[' -n '' ']'
+ touch ../empty.log
